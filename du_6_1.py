
# du_X_Y.py
# V √∫kolech v t√©to sadƒõ je pot≈ôeba (narozd√≠l od p≈ôedchoz√≠ch sad) v≈ædy zadefinovat nejakou funkci. Nen√≠ t≈ôeba naƒç√≠tat vstup pomoc√≠ funkce input, testy budou volat Va≈°i
# funkci tak, jak uv√°d√≠ vzorov√© vol√°n√≠.
# Pokud je uveden√© vzorov√© vol√°n√≠ a vzorov√Ω v√Ωsledek, chce se od V√°s, aby n√°vratovou
# hodnotou vzorov√©ho vol√°n√≠ byl vzorov√Ω v√Ωsledek (return).
# Pokud je uveden√© vzorov√© vol√°n√≠ a vzorov√Ω v√Ωstup, nem√° funkce vracet ≈æ√°dnou
# n√°vratovou hodnotou, ale m√° vypisovat vzorov√Ω v√Ωstup (print).
# D√ö 6.1: Vzd√°lenost bod≈Ø
# Mƒõjme dva body v rovinƒõ: ùê¥ = [ùëéùë•
# , ùëéùë¶
# ], ùêµ = [ùëèùë•
# , ùëèùë¶
# ].
# Vzd√°lenost mezi body ùê¥, ùêµ um√≠me spoƒç√≠tat podle vzorce:
# |ùê¥ùêµ| = ‚àö(ùëéùë• ‚àí ùëèùë•
# )
# 2 + (ùëéùë¶ ‚àí ùëèùë¶
# )
# 2
# √ökol:
# Napi≈°te funkci distance, kter√° bere jako parametry sou≈ôadnice dvou bod≈Ø v rovinƒõ
# (tj. dvƒõ dvojice re√°ln√Ωch ƒç√≠sel) a vrac√≠ vzd√°lenost tƒõchto bod≈Ø.
# Vzorov√© vol√°n√≠ 1: ‚ÄÉ Vzorov√© vol√°n√≠ 2: ‚ÄÉ
# distance((1, 1), (5, 4)) distance((-1.5, 3.2), (5.8, 12.6))
# Vzorov√Ω v√Ωsledek 1: ‚ÄÉ Vzorov√Ω v√Ωsledek 2: ‚ÄÉ
# 5.0 11.901680553602503


# import math
# def distance(bod_a: tuple[float, float], bod_b:tuple[float, float]):
#     #tato fnc meri vzdalenost bodu a,b

#     bod_a = [1, 1]
#     bod_b = [5, 4]

#     x = ((bod_a[0]) - (bod_b[0]))**2
#     print(x)
#     y= ((bod_a[1])**2 - (bod_b[1]))**2
#     print(y)
#     abs_distance = (abs(x + y))
#     distance = math.sqrt(abs_distance)
#     return distance

# print(distance([1,1], [5,4]))

#######################################################################    
####VarB
# import math



# def distance(bod_a: tuple[float, float], bod_b:tuple[float, float]) -> float:
#     #tato fnc meri vzdalenost bodu a,b

#     # bod_a = [1, 1]
#     # bod_b = [5, 4]

#     x = ((bod_a[0]) - (bod_b[0]))**2
#     print(x)
#     y= ((bod_a[1])**2 - (bod_b[1]))**2
#     print(y)
#     abs_distance = (abs(x + y))
#     distance = math.sqrt(abs_distance)

#     return distance

# print(distance([1,1], [5,4]))

#######################################################################
####VarC


import math

def distance(point1: tuple[float, float], point2: tuple[float, float]) ->float:
    return math.dist(point1, point2)

# Vzorov√° vol√°n√≠:
vzdalenost1 = distance((1, 1), (5, 4))
vzdalenost2 = distance((-1.5, 3.2), (5.8, 12.6))

print(vzdalenost1)  # Vzorov√Ω v√Ωsledek 1: 5.0
print(vzdalenost2)  # Vzorov√Ω v√Ωsledek 2: 10.442548329704964